<#> bdsl2
var si::float = 8.0;

function myFn1(x::float, y):: float {
	return y * si + x * 2
}

if (si > 5) {
	var w = 4.0;
}

function createSyncPattern(x) {
	if (x < 4) {
		var y = x + 1;
		return s rvelocity(px(1 + sqrt(y / 4)));
	} else {
		return s rvelocity(pxy(1 + sqrt(x / 4), sine(2, 2, t)));
	}
}

var sm = pattern({
		boss 'simp.kasen'
	}, {
	phase 0 { } {
		paction 0 {
			shiftphaseto 2
		}
	}
	phase 30 { 
		type non "Wrap/If Example"
		hp 10000
	} {
		paction 0 {
			gtr {
				wait(30)
				times(10)
				preloop b{
					hvar itr = i
				}
			} {
				debugf(myFn1(5, 6))
				position 0 0
				sync "sakura-blue/w" <> gsr2c 10 {
					preloop b{
						hvar loop = i + 1
					}
				} wrap(b{
					var sp = null;
					if (itr % 2 == 0) {
						sp = createSyncPattern(itr);
					} else {
						sp = color "sakura-red/b" s rvelocity(px(1 + sine(2, 0.5, t)));
						//empty blocks are ok, the else can also be removed
						//but note that double assignment to SyncPattern will
						// result in leaking EnvFrames
					}
					sp;
				})
			}
				
		}
	}
	phase 30 { 
		type non "Async Wrap/If Example"
		hp 10000
	} {
		paction 0 {
			gtr {
				wait(120)
				times(10)
				preloop b{
					hvar itr = i
				}
			} {
				debugf(myFn1(5, 6))
				position 0 0
				async "sakura-*/b" <> wrap(b{
					var ap = null;
					if (itr % 2 == 0) {
						ap = gcr {
							wt(6, 10)
							circle
							color({ "blue" })
							preloop b{
								hvar loop = i + 1
							}
						} s rvelocity(px(myFn1(itr, loop) / 10));
					} else {
						ap = gcr {
							wt(6, 20)
							circle
							color({ "red" })
							preloop b{
								hvar loop = i + 1
							}
						} s rvelocity(pxy(1, 1));
					}
					ap;
				})
			}
				
		}
	}
	phase 30 { 
		type non "SM Wrap/Conditional Example"
		hp 10000
	} {
		paction 0 {
			gtr {
				wait(60)
				times(20)
				preloop b{
					hvar itr = i
				}
			} {
				debug("loop")
				wrap(b{
					itr % 2 == 0 ? debug("even!") : debugf(itr)
				})
			}
				
		}
	}
})
sm;