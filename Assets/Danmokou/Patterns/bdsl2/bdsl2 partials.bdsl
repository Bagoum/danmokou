<#> bdsl2

//Type annotations may be required for overloaded functions

var rotateByBase::Func<float,v2,v2> = $(rotate);
var addtester = $(addtest, 15.0);
var lookup = testlookup1(addtester, 5);

function makeRotator(itr)::Func<Vector2,Vector2> {
	return $(rotateByBase, itr * lookup);
}


var sm = pattern({
		boss 'simp.kasen'
	}, {
	phase 0 { } {
		paction 0 {
			shiftphaseto 1
		}
	}
	phase 30 { 
		type non "Partial Functions Example"
		hp 10000
	} {
		paction 0 {
			gtr {
				preloop b{ 
					hvar lr = 1.0
				}
			} {
				position 0 0
				movetarget(b{ 
					var myt = lr + 1
					myt + 0.1
				}, $(eiosine), pxy(0, lr))
				async "sakura-blue/w" <> gcr {
					wtd(dl, 60, 10)
					preloop b{ 
						hvar itr = i
					}
				} {
					exec(b{
						hvar mover = makeRotator(itr)(cx 2)
					})
					gsr2 10 <2> {
					} s rvelocity(mover)
					gsr2 10 <-2> {
					} color "triangle-black/b" s rvelocity(px(lerpsmooth($(eoutsine), 0.3, 1.2, t, 4, 0.6)))
				}
			}
				
		}
	}
})
