

function eventListen2(mct::float) {
	return sync "stelldecagon-pink/w" <0.4;:> gsr2c ceil(mct) { } s rvelocity cx 2;
}

pattern { } {
phase 0 {} {
	paction 0 {
		shiftphaseto(1)
	}
}
phase 0 {
	type(non, "ev")
	photo(2)
	// Trigger-type events can only be published once, they then need to be reset by another event
	// eventf = float-type event
	eventf "evf" trigger
	// _ or "normal" indicates a normal event that has no restrictions on publishing
	// event0 = unit-type event (effectively, an event that does not carry a value)
	event0 "ev0" normal
} {
	paction 0 {
		// When ev0 publishes, reset the trigger on evf
		event resettrigger "evf" "ev0"
		exec b{
			hvar circSpeed = 3;
			hfunction eventListen0(_::Unit) {
				return sync "scircle-red/w" <> s tprot px circSpeed;
			}
			hvar arrowSpeed = 1;
			hfunction eventListen1(mct::float) {
				return sync "arrow-blue/w" <0.4;:> gsr2c mct { } s rvelocity px arrowSpeed;
			}
		}
		// When ev0 publishes, fire an scircle to the right
		event listen "ev0" $(eventListen0)
		// When evf publishes, fire mct arrow bullets in a circle, where mct is the value of the event
		event listen("evf", $(eventListen1))
		// Every 60 frames, publish to evf
		// Since evf is a trigger event, most of these publishes will be noops
		gtr {
			times inf
			wait 60
			preloop b{ hvar lp = i; }
		} event onnextf "evf" (5 + softmod(6, lp))
		// After 4 seconds, publish ev0
		_ 4 event onnext0 "ev0"
		// Every 100 frames, fire big orange circles and publish ev0
		async "glcircle-orange/w" <30> gcr {
			wait 100
			times 3
			rpp <60>
		} {
			s tprot cx 2
			event0 "ev0"
		}
	}
}
		
// bullet control events
phase 0 {
	eventf "evf2" normal
	hp 1000000
} { 
	paction 0 {
		event listen "evf2" $(eventListen2)
		sync "gdcircle-purple/w" <1;:> simple tprot cy -1 {
			scale(4 - 2 * t / 3)
		}
		// When the gdcircle is 3 seconds old, publish to evf2 with the value of gdcircle's size (scale)
		bulletcontrol persist "gdcircle-*" proceventf "evf2" scale onlyonce(t > 3)
	}
}
}
