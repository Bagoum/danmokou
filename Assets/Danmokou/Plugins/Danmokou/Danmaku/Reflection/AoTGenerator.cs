using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using BagoumLib;
using BagoumLib.Expressions;
using Danmokou.Core;
using Danmokou.DMath;
using UnityEngine;

namespace Danmokou.Reflection {
public static partial class Reflector {
#if UNITY_EDITOR
    private const string AOT_GEN = "Assets/Danmokou/Plugins/Danmokou/Danmaku/AoTHelper_CG.cs";
    private static readonly Type[] autogenGenerics = {
        typeof(float), typeof(bool), typeof(Vector2), typeof(Vector3),
        typeof(Vector4), typeof(V2RV2)
    };

    private static string GenerateFile(IEnumerable<string> funcs) => $@"//----------------------
// <auto-generated>
//     Generated by Danmokou reflection analysis for use on AOT/IL2CPP platforms.
//     This file ensures that generic methods used by reflection are properly generated by the AOT compiler.
// </auto-generated>
//----------------------

using System;

namespace Danmokou.Reflection {{
public static class AoTHelper_CG {{
    public static void UsedOnlyForAOTCodeGeneration() {{
        {string.Join("\n\t\t", funcs)}

        throw new InvalidOperationException();
    }}

}}
}}
";
    
    public static void GenerateAoT() {
        List<string> funcs = new();
        HashSet<MethodInfo> mis = new(); //weed out alias duplicates
        var typePrinter = new CSharpTypePrinter { PrintTypeNamespace = _ => true };
        void AddConstructedMethod(MethodInfo mi) {
            if (mis.Contains(mi)) return;
            mis.Add(mi);
            var type_prms = string.Join(", ", mi.GetGenericArguments().Select(typePrinter.Print));
            var args = string.Join(", ", mi.GetParameters().Length.Range().Select(_ => "default"));
            funcs.Add($"{typePrinter.Print(mi.DeclaringType!)}.{mi.Name}<{type_prms}>({args});");
        }
        foreach (var mi in postAggregators.Values.SelectMany(v => v.Values).Select(pa => pa.sig.Mi as MethodInfo).Concat(ReflectionData.MethodsByReturnType.Values.SelectMany(v => v.Values))) {
            if (!mi!.IsGenericMethod) continue;
            if (mi.IsGenericMethodDefinition) {
                //nonconstructed method (eg. StopSampling<T>)
                if (mi.GetGenericArguments().Length == 1) {
                    foreach (var t in autogenGenerics) {
                        AddConstructedMethod(mi.MakeGenericMethod(t));
                    }
                } else {
                    //pray
                }
            } else {
                //constructed method (eg. ParticleControl)
                AddConstructedMethod(mi);
            }
        }
        FileUtils.WriteString(AOT_GEN, GenerateFile(funcs));
    }
    
#endif
}
}