<#> warnprefix
pattern {
	bosses {
		jy.yukari 
		jy.junko 
	} {
		1 0
		3 1
		5 0
		7 1
		9 0
		11 1
	}
	bgm {
		2 jy.bgm
	}
	setuifrom 2
}

!!{ me yukari
!!{ other junko
!!{ loco lbeh $other

phase 0
	paction 0
		@ { $other }
			position -15 0
		@ { $other }
			diverthp $me
		shift-phase-to 7


!{ power1()
sync powerup1 <> poweraura boss1
	witha 0.9 lerp 0 1 t purple pink
	witha 0.9 yellow
!}
!{ jpower1()
sync powerup1 <> poweraura boss1
	witha 0.9 lerp 0 3 t red pink
	witha 0.9 blue
!}
!{ jpower2()
sync powerup1 <> poweraura boss1
	witha 0.5 lerp 0 3 t red pink
	witha 0.5 blue
!}
!{ power1long()
sync powerup1 <> powerup x-powerup-1
	witha 0.9 lerp 0 2.5 t purple yellow
	3 5
!}
!{ jpower1long()
sync powerup1 <> powerup x-powerup-1
	witha 0.9 lerp 0 3 t red blue
	3 5
!}


## Total 8+1 cards, 4 dialogues


##1
<!> dialogue #{
<!> root 0 1
phase 0
	saction 0
	    dialogue(jy.1)
		##playervariant {
		##	(basic-reimu dialogue(jy.1))
		##	basic-mima dialogue(jy.1m)
		##}
		shift-phase
#}

##2
<!> type non `Border of Wave, Particle, Vector, and Curve` #{
<!> hpi 15000 6
<!> root 0 2
<!> rootother $other 0 0.5
phase 38
	paction 0
		timer restart pt
		async star-*/w <> gcr2 /i dl 8 _ <> {
			frv2	a sine 8p 700 timersec(pt)
			start swt =f 100
			p this
		} gsr2c 6 {
			color { yellow purple }
			bindLR
		} simple :: {
			rt	(t - &swt)
		} polar(
			lssht(-6, (&swt + 0.3), 2.8 * t, 0.6 * t),
			&lr * lssht(0.8, &swt + 1, 0, 12 * t))
		{ dir2  if < t &swt cossindeg(&lr * starrot4) (norm accdelta) }
		gtr2 4.5s _ <> {
			wait-child
			timereset
			start aoff =f 0
			postloop aoff +=f (360h / 5)
!!{ spokes 6
!!{ crep 12
		} saction 0 
			@ $other
				$jpower2
			wait 1.5
!!{ maxt 1.5
			## This update needs to occur before the direction update (priority 100)
			##   to make the fireball direction correct on the first frame.
			bullet-control once star-* batchp 70 onscreen loc {
				updatef swt t _
			}
			bullet-control once star-* batch onscreen loc {
				restyleeffect fireball-red/ _ > &.lr 0
				restyleeffect fireball-blue/ _ < &.lr 0
			}
			
#}


##3
<!> type timeout `Border of Wave, Particle, Plane, and Sphere` #{
<!> root 0 3
<!> rootother $other 0 -4
phase 39
	paction 0
		pool-control circle-* allowdelete false

!!{ r0 3
!!{ r1 3.8
!!{ r lerpt 0 3 $r0 $r1
!!{ phi lssht(-2, 1, 50 * t, 9 * t)
!!{ theta  (&.ang + 6 * t)
	paction 0
!{ fromto(from, to, when)
bullet-control _ %from restyle %to %when
!}
!{ fromtos(from, to, soft, when)
bullet-control _ %from restyleeffect %to %soft %when
!}
!{ psigt(from, to)
$fromto(%from, %to, > mod 360 $phi 180)
!}
!{ psiltC(from, to)
bullet-control _ %from softcull cwheel-yellow/ < mod 360 $phi 180
!}
!{ thetagt(from, to, soft)
$fromtos(%from, %to, %soft, > mod 360 $theta 180)
!}
!{ thetalt(from, to, soft)
$fromtos(%from, %to, %soft, < mod 360 $theta 180)
!}
		$psiltC(circle-red/w, circle-blue/w)
		$psigt(circle-blue/w, circle-red/w)
		$psiltC(circle-red/b, circle-blue/b)
		$psigt(circle-blue/b, circle-red/b)
		$thetalt(circle-blue/w, circle-blue/b, _)
		$thetagt(circle-blue/b, circle-blue/w, _)
		$thetagt(circle-red/w, circle-red/b, _)
		$thetalt(circle-red/b, circle-red/w, _)
		pool-control circle-purple/w cullrad 0.5
		timer restart pt
		@ $other
			_ 0.5 $jpower1
		bullet-control _ gem-yellow/w restyleeffect circle-blue/w _ (> t 2 | (> timersec(pt) 2 & > t 1))
!!{ pctrl > t 1
		bullet-control _ gem-purple/w copynull _ onlyonce > t (1 - 1f)
		bullet-control _ gem-purple/w batch $pctrl {
			updatef {
				sh 1
			} _
			restyleeffect lcircle-purple/w cwheel-purple/ _
		}
		async amulet-pink/ <> gcr3 /i dl 5 6.5s <> {
				frv2	a sine 7p 1300 timersec(pt)
				sfx x-fire-loop-1
		} gsr2c 5 {
		} s tprot cx 4.2
		async gem-purple/w <> gcr2 2 _ <> {
				delay 1s
				frv2	a sine 5p 900 timersec(pt)
				start { 
					yoff =f y
					sh =f 0
				}
		} gsr2c 5 {
			preloop a =f [&rv2].a
		} simple
			offset
			px if($pctrl,
				lerp(2, 8, timersec(pt), 6, 3.9) + 2 * (-m t 1) ,
				lssht(2, 0.5, 0, 2.5 * t))
			py if $pctrl neg &yoff 0 {
				scale if (= &sh 1, 0.8, 1)
				dir if (= &sh 1, 400 * t, &a)
			}
		gtr2 0 _ <360h> {
			wait-child
		} saction 0 :4
			async gem-yellow/w <> gcr3 /i (dl ^ 0.7) 30 9s <> {
				p this
			} gsr2c 5 {
				preloop ang =f ([&rv2].a + 10p * p)
			} gsr {
				frv2	a sine 7p 700 timersec(pt)
			} s nroffset 
				lerpsmooth io-sine 1.3 4 (max t lerpsmooth io-sine 0 4 t t (min 4 timersec(pt)))
				rotify px(t * (lerp 3 7 timersec(pt) 3 1.7))
				(py(neg $r0) + 
					tp qrotate px -75 fromsphere
						$r
						pxy($theta, $phi))
			$power1
			~ @ $other
				_ 1 $jpower1
			wait 1.5
#}


##4
<!> dialogue #{
phased jy.2
#}

##5
<!> type non `Border of Wave, Particle, Offset, and Origin` #{
<!> hpi 17000 8
<!> root 0 2.5
<!> rootother $other 0 1
phase 36
	paction 0
		timer restart pt
		pool-control triangle-purple/w cullrad 15
		pool-control circle-blue/b allowcull false
		gtr2 7.5s _ <> {
			delay 2s
		} saction 0 :3
			@ $other
				$jpower2
			wait 1.5
			bullet-control once triangle-purple/w batch (> y -6 & in t 0.35 3.4) {
				updatef tret t _
				time 100 _
				restyleeffect circle-blue/b _ _
				sfx x-transform-2 _
			}
		bullet-control _ circle-blue/b batch > t (100.7 + &.tret * 3.9 / 1.7) {
			updatef red 1 _
			restyleeffect lcircle-red/w cwheel-red/ _
		}
		async triangle-purple/w <> gcr2 /i dl 10 _ <> {
			preloop { 
				th		=f (20 * timersec(pt))
				r		=f (0.3 + 1.8 * cosdeg(5 * &th))
				ox	=f (&r * cosdeg &th)
				oy	=f (&r * sindeg &th)
				tret	=f 0
				red	=f 0
			}
			frv2 nrot &ox &oy sine 5p 700 timersec(pt)
		} gsr2c 6 {
			preloop a =f [&rv2].a
		} simple
			tp
			if < t 100 
				px lerpt 0 0.3 0 3.9
				px lerpt 100 101.2 1.7 -1.7
			switchH(t, 100 + &tret * 0.9 * 3.9 / 1.7,
				zero,
!!{ tback 1.5
				eased(io-sine, $tback, pxy(&ox, &oy + 1.5)* -1 / $tback))
			{ dir if (= &red 1, 400 * t, &a) }
#}

##6
<!> dialogue #{
phased jy.3
#}

##7
<!> type spell `Border of Wave, Particle, Line, and Shape` #{
<!> hpi 18000 6
<!> root 0 1.5
<!> rootother $other 0 3
phase 36
	paction 0
!!{ jt 2
		beh-control persist gdlaser-yellow/b restyle gdlaser-red/b > t $jt
		beh-control persist gdlaser-purple/b restyle gdlaser-blue/b > t $jt
		beh-control persist gdlaser-yellow/ restyle gdlaser-red/ > t $jt
		beh-control persist gdlaser-purple/ restyle gdlaser-blue/ > t $jt
		
		timer restart pt
		async sakura-pink/w <> gcr2 /i dl 14 _ <> {
			frv2	a sine 8p 800 timersec(pt)
		} gsr2c 5 {
		} s tprot cx 3.7
		
		gtr2 0.8s _ <> {
			bindUD
			p this
			wait-child
		} paction 0 :2
			@ $other
				saction 0 :4
!!{ movet1 1.5
					wait ($movet1 + $jt - 1.5)
					$jpower1
					wait 1.5
					move-target 2 io-sine pxy(1.5 * &ud, y)
					
			sync icrow <> gsr2 3 <> {
				p this
				root zero
			} gsr2 2 <> {
				bindLR
			} summonr null pxy ([lbeh $other].x + &rl * ((1.6 - 0.1 * dc) + 1.2 * p), 6 * &ud)
				saction 0
					move-target $movet1 io-sine pxy(x, -0.2 + 3.5 * &ud)
					async gdlaser-* <> iparent this gsr {
						colorf { yellow/b purple/b } pmz1 &lr
!!{ len (2.3 + 0.3 * dc)
					} laser nroffset px lerpsmooth(io-sine, 3, 6, t, 0, &lr * $len / tau) 2 _ {
						dsfx
						length $len
						s	0.6
						dynamic tprot :: {
							elt	-m &lt $jt
!!{ per 3
						} rotate
							limit(lerpsmooth(out-sine, 0, $per, &elt, 120, 360), &ud * &rl 
								* lerpsmooth(out-sine, 0, $per, &elt, 0, 360 / $len) * lerpsmooth(out-sine, 0, $per, &elt, -m t 4, -m t 0))
							py(&ud * -1 * lerpsmooth(out-sine, 0, $per, &elt, 20 / $len, 1))
					}
					wait(-0.5 + $jt + $per + 1.2 * p + 0.3 * &lr)
					sfx x-crow
					~ async fireball-*/ <180> gcr {
						times 0
						delay 120
						face v
						sfx x-fire-burst-1
						colorf { red blue } pmz1 &lr
					} gsr2 3 <20> {
						center
					} s tprot px(&ud * lerpt 0 3 2 -2)
					move _ tpnrot(ss0(vhome 5 Lplayer) * (lerpsmooth io-sine 0 2 t 0 1) )
					break
				{ }
#}


##8
<!> type non `Border of Wave, Particle, Area, and Perimeter` #{
<!> hpi 17000 8
<!> root 0 2.5
<!> rootother $other 0 1.5
phase 36
	paction 0
		timer restart pt
		pool-control arrow-purple/w cullrad 20
		pool-control circle-blue/ allowcull false
		pool-control circle-red/ allowcull false
		bullet-control persist circle-* time 100 < t 100
		@ $other
			paction 0 :2
				move _ nroffset px sine 4p 1.8 t
				gtr2 2s _ <> {
					delay 1s
					wait-child
					bindLR
				} saction 0 :3
					$jpower1
					wait 1.5
!!{ range (lerp 0 20 timersec(pt) 12 14)
!{ makeCtrl(from, to, spd, eff) 
bullet-control once %from batch (> y -2.5 & onscreenby $range loc) {
	updatef {
		nang	angleto $loco
		nspd	%spd
		nlayer	ceil(5 * clamp(0.01, 0.99, lerp01(distto($loco) / ($range + disttowall($loco, loc - $loco)), -0.1, 1.1)))
	} _
	updatev2 {
		nloc		($loco + norm(loc - $loco) * (0.2 + 0.24 * &.nlayer))
	} _
	copy %to _
	##restyle %to _
	copynull _ _
}

!}
					if > &lr 0
						$makeCtrl(arrow-purple/w, circle-red/, 1.3, cwheel-purple/)
						$makeCtrl(arrow-purple/w, circle-blue/, 1.6, cwheel-purple/)
		
		async arrow-purple/w <> gcr {
			wait(11 / dl)
			times(_)
			##frv2	a sine 8p 700 timersec(pt)
			rv2incr(angle(7 + 0.5 * tdl))
			start {
				nloc =v2 zero
				nang =f 0
				nspd =f 0
				nlayer =f 0
			}
		} gsr2c 8 {
!!{ tsw 100.5
		} s tpnrot switchH t $tsw
			rotify px lerpt 99 $tsw 4.3 0
!!{ tin 3
!!{ layerOffset (-0.5 * (&.nlayer - 1) - $tin)
			if < t $tin
				easedvhomet io-sine $tin &nloc
				rx
					lerp 0 0.3 (t + $layerOffset) 0 &nspd
					&nang
		bullet-control persist circle-blue/ batch > t ($tsw - $layerOffset) {
			 restyleeffect circle-blue/w cwheel-blue/ _
			 sfx x-fire-burst-1 _
		}
		bullet-control persist circle-red/ batch > t ($tsw - $layerOffset) {
			 restyleeffect circle-red/w cwheel-red/ _
			 sfx x-fire-burst-2 _
		}
#}


##9
<!> type spell `Border of Wave, Particle, View, and Reflection` #{
<!> hpi 20000 7
<!> root 0 1
<!> rootother $other 0 2.5
phase 42
	paction 0
		timer restart pt
			
!!{ cl < x xmin
!!{ cr > x xmax
!!{ cu > y ymax
!!{ cd < y ymin
!!{ cx ($cl | $cr)
!!{ cy ($cu | $cd)
!!{ condu ($cx | $cu)
!!{ condl ($cy | $cl)
!!{ condd ($cx | $cd)
!!{ condr ($cy | $cr)
!!{ cond select @0 cmdloop {  code($condu)  code($condl)  code($condu)  code($condr) code($condu) }

		@ $other
			gtr2 0 _ <> {
				wait-child
				p this
			} saction 0
				savef cmdloop 0 p
				$jpower1
				wait 1.5
				timer restart st
!!{ tctrl 8
				bullet-control < timersec(st) $tctrl lstar-yellow/w softcull cwheel-yellow/ $cond
				bullet-control < timersec(st) $tctrl empty sm $cond
					sync lightning-blue/w <> gsr {
						face d
						start rv2.a =f  if($cx, 180 - &.ang, neg &.ang)
						sfx x-fire-tech-8
					} pather 1 0.7 tprot cx 3.1 { high s 1.3 }
				wait $tctrl
				sfx x-boom
				move-target 1.5 io-sine pxy (-3 * if(even p, pm1(p // 2), 0), 2.5 * (if odd p 1 0))
				break
	
!!{ mov tprot px lerpt 0 0.6 1 1.9
!!{ erpt (( dl ^ 0.9) * 50)
		bullet-control _ empty cull ($cx | $cy)
		async empty <> gcr2 180 _ aphi $erpt {
		} gsr2c $erpt {
			preloop ang =f [&rv2].a
		} s $mov
		async lstar-yellow/w <> gcr2 /i dl 20 _ <> {
			frv2	a sine 7p 1100 timersec(pt)
			p this
		} gsr2c 5 {
		} simple $mov { dir starrot2 }

#}


##10
<!> type spell `Border of Wave, Particle, Continuity, and Gap` #{
<!> hpi 20000 5
<!> root 0 2
<!> rootother $other 0 0.5
phase 42
	paction 0
		timer restart pt
!!{ crep 5
!!{ wait2 if(divby 8 ++ t, 160, 30)
!!{ bowap sine 9p 1200 timersec(pt)
!!{ maxt 1.3
!!{ fdelay  (0.5 + 1.3 * ($maxt - &.tret))
		bullet-control _ circle-*/w time 100 < t 100
		bullet-control _ circle-blue/w sm > t (100 + $fdelay)
			sync gpather-blue/w <> pssfx x-fire-tech-6 pather 1 0.7 tprot cr(3, 50) {  }
		bullet-control _ circle-red/w sm > t (100 + $fdelay)
			sync gpather-red/w <> pssfx x-fire-tech-6 pather 1 0.7 tprot cr(3, -50) {  }
		bullet-control _ circle-blue/w softcull cwheel-blue/ > t (100 + $fdelay)
		bullet-control _ circle-red/w softcull cwheel-red/ > t (100 + $fdelay)
		gtr2 4s _ <> {
			bindLR
		} saction 0
			@ $other
				$jpower2
			wait 1.5
			savef lr 0 &lr
			bullet-control once gem-purple/w batch < t $maxt {
				updatef tret t _
				updatef lr @0 lr _
				copy circle-blue/w (= @0 lr 1)
				copynull cwheel-blue/ (= @0 lr 1)
				copy circle-red/w (= @0 lr -1)
				copynull cwheel-red/ (= @0 lr -1)
			}
			break
		async gem-purple/w <> gcr2 /i dl 6 _ <> {
			frv2	a $bowap
			start {
				tret =f 0
				lr =f 0
			}
		} gsr2c $crep {
		} s tprot px lerpt3(0.2, 0.8, 1, 1.3, 1, 4,
			lerpt 100 100.3 0.7 0)
#}


##11
<!> type spell `Border of Wave, Particle, Circle, and Lily` #{
<!> hpi 22000 6
<!> root 0 2
<!> rootother $other 0 0.5
phase 42
	paction 0
		timer restart pt
		bullet-control _ gem-yellow/w sfx x-transform-1 > t 1.5
		bullet-control _ gem-yellow/w restyleeffect lcircle-red/w cwheel-red/ (> t 1.5 & = &.layer 0)
		bullet-control _ gem-yellow/w restyleeffect lcircle-blue/w cwheel-blue/ (> t 1.5 & = &.layer 1)
		async scircle-purple/b <> gcr2 /i dl 25 _ <> {
			frv2	a sine 8p -1100 timersec(pt)
		} gsr2c 5 {
		} s tprot cx 2.2
		gtr2 lerpt 0 5 3s 2s _ <> {
			wait-child
			timereset
			start aoff =f 0
			postloop aoff +=f (360h / 5)
## 360 div 2 * spokes * crep
!!{ spokes 6
!!{ crep max(4, 2 + 2 * dc)
		} paction 0 
			@ $other
				$jpower2
			async gem-yellow/w <> gcr2 (1s / $crep)  (2 * $crep) <> {
				sfx x-fire-loop-1
				start {
					nloc =v2 zero
					nang =f 0
					nspd =f 0
					nlayer =f 0
				}
				preloop { 
					a1 =f sine 8 700 timersec(pt)
					a2 =f (t * 360 / ($spokes * $crep))
					layer =f if (< t $crep) 0 1
					sr =f (t / $crep)
				}
			} gsr2c $spokes {
				preloop at =f [&rv2].a
			} simple
				:: {
					gt		(t + &st)
				} roffset
					lerpsmooth io-sine 1.3 2.7 t
						rx
							(1.7 * t)
							&a1
						rx(
							 -1 + -1 * &layer + 1 * &gt * ++ sine(1, 0.22 * rangesoftmod(1, 1 + 4 * &sr), &gt / 5),
							if(= &layer 0, 14 * &gt, -7 * &gt) + (&sr * 360 / $spokes) + &aoff)
				{ scale if (> t 1.5) 0.8 1 dir if (> t 1.5, 400 * t, &at + &a1) }
#}


##12
<!> type spell `Border of Wave, Particle, Touhou, and CAVE` #{
<!> hpi 18000 7
<!> root 0 2.5
<!> rootother $other 0 0.3
phase 42
	paction 0
		timer restart pt
		savef ysw 0 100
!!{ t1 (0.55 + cosine(7.5, 0.25, timersec(pt) - 1.5))
!!{ spd 3.5
		@ $other
			$jpower1
		_ 1.5 sync _ <> relcirc _ mine
				rxy($t1 * $spd, $t1 * $spd)
				witha lerpt -1 1 0 0.8 blue
		_ 1.5 bullet-control persist lcircle-purple/w batch in (t - $t1) 0 2f {
			updatef tsw t _
			restyleeffect lcircle-blue/ _ _
		}
		gtr {
			delay 3s
		} saction 0
			$power1
			wait 1.5
			~ async x-fire-loop-1 <> gcr2 10 _ <> { } sfx
			~ async fireball-yellow/w <> gcr2 /i dl 26 _ <> {
				preloop
					a1 =f  sine 7.5 300 timersec(pt)
				bindItr i1
			} gsr2c 8 {
				bindItr i2
			} s polar
				lssht3 -3 0.7 1 1.6 (4 * t) (0 * t) (4 * t)
				lerpsmooth io-sine 0 0.8 (min(t - 0.5, timersec(pt) - @0 ysw)) 
					mod 90 &a1 
					mod(90, pm1(&i2) * 6 * &i1)
			@ $other
				$jpower1
			wait 1.5
			sync _ <> relcirc _ $me
				rxy 2.8 2.8
				witha lerpt 0 1 0 0.5 red
			savef ysw 0 timersec(pt)
			bullet-control persist fireball-yellow/w restyleeffect fireball-red/ _ > t 0.7
			break
		
		async lcircle-purple/w <> gcr2 /i dl 14 _ <> {
!!{ eq 7.5p -500 timersec(pt)
			frv2	a cosine $eq
			preloop {
				d =f dcosine $eq
				d =f maxa(sign(&d) * 100, &d)
				tsw =f 100
			}
		} gsr2c 6 {
			p this
		} simple :: {
			td	(t - &tsw)
		} polar(
			$spd * t,
			-0.11 * &d * -m t &tsw)
		{ dir (pm1(p) * 400 * timersec(pt)) }
		
#}


##13
<!> type final `Border of Wave, Particle, Wisdom, and Power` #{
<!> hpi 48000 2
<!> root -2 2
<!> rootother $other 2 2
phase 52 
	paction 0
!{ powerboth()
	gtr { } { 
		$power1long()
		@ $other
			$jpower1long()
	}
!}
		$powerboth()
		_ 1 $powerboth()
		_ 1.8 $powerboth()
		_ 2.5 $powerboth()
		_ 3.1 $powerboth()
		_ 3.5 $powerboth()
		draiko 2 8
		_ 4 shift-phase
#}


##14
<!> dialogue #{
phased jy.4
#}

<!> root -8 7
<!> rootother $other 8 7
phase 0
	paction 0
		shift-phase

///


